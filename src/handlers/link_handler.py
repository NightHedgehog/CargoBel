from __future__ import annotations

import re
from bson import ObjectId

from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from src.states.price import OrderStates
from src.keyboards.link_keyboard import link_keyboard
from src.keyboards.size_keyboard import size_keyboard
from src.database.connection import connection

router = Router()

orders = connection["orders"]

def _oid(s: str) -> ObjectId:
    return ObjectId(str(s))


async def _get_item(order_id: str, item_index: int) -> dict | None:
    doc = await orders.find_one({"_id": _oid(order_id)}, projection={"items": 1})
    if not doc:
        return None
    items = doc.get("items", [])
    if 0 <= item_index < len(items):
        return items[item_index]
    return None


def _item_caption(item: dict) -> str:
    link = item.get("link") or "‚Äî"
    size = item.get("size") or "‚Äî"
    color = item.get("color") or "‚Äî"
    price = item.get("price_cny")
    price_str = f"{price} ¬•" if price is not None else "‚Äî"
    qty = item.get("qty")
    qty_str = str(qty) if qty is not None else "‚Äî"

    return (
        "üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üé® –¶–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {color}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_str}"
    )

URL_RE = re.compile(r"(?i)\b((?:https?://|www\.)[^\s]+)")

def _normalize_url(text: str) -> str | None:
    m = URL_RE.search(text or "")
    if not m:
        return None
    url = m.group(1)
    if url.startswith("www."):
        url = "https://" + url
    return url

# ========== –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ==========
@router.message(StateFilter(OrderStates.link), F.text)
async def handle_link_input(message: types.Message, state: FSMContext):
    url = _normalize_url(message.text.strip())
    if not url:
        await message.answer(
            "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://).",
            reply_markup=link_keyboard(back_cb="back_to_photo"),
        )
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    item_index = int(data.get("item_index", 0))

    try:
        oid = ObjectId(order_id)
    except Exception:
        await message.answer("üò¨ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—É—â–∏–π item
    await orders.update_one(
        {"_id": oid},
        {"$set": {f"items.{item_index}.link": url}},
        upsert=False,
    )

    # ‚ú® –¥–æ—Å—Ç–∞—ë–º item, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∏–º–µ–Ω–Ω–æ —Å —Å—Å—ã–ª–∫–æ–π
    item = await _get_item(order_id, item_index)

    await message.answer(
        f"{_item_caption(item)}\n\n"
        "üìè –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–æ–¥–µ–∂–¥—ã –∏–ª–∏ –æ–±—É–≤–∏) –∏–ª–∏ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–¥–ª—è –∏–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)\n\n"
        "‚ùóÔ∏è–ß—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n"
        "‚ùóÔ∏è–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä–Ω—É—é —Å–µ—Ç–∫—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö.\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 43, M, L, 42.5",
        reply_markup=size_keyboard(back_cb="back_to_link"),
        disable_web_page_preview=True,
    )
    await state.set_state(OrderStates.size)



# –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–µ —Ç–µ–∫—Å—Ç (—Å—Ç–∏–∫–µ—Ä, —Ñ–æ—Ç–æ –∏ —Ç.–ø.) ‚Äî –ø—Ä–æ—Å–∏–º –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É
@router.message(StateFilter(OrderStates.link))
async def handle_link_invalid(message: types.Message):
    await message.answer(
        "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä. –ü—Ä–∏–º–µ—Ä: https://item.taobao.com/‚Ä¶",
        reply_markup=link_keyboard(back_cb="back_to_photo"),
    )

# –ù–∞–∑–∞–¥ –∏–∑ —à–∞–≥–∞ "—Ä–∞–∑–º–µ—Ä" ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥—É "—Å—Å—ã–ª–∫–∞"
@router.callback_query(F.data == "back_to_link")
async def back_to_link(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.link)
    await callback.message.edit_text(
        "üîó –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n\n"
        "‚ùóÔ∏è–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –Ω–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ, "
        "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
        reply_markup=link_keyboard(back_cb="back_to_photo"),
    )
    await callback.answer()