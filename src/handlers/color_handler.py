from bson import ObjectId

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from src.database.connection import connection
from src.keyboards.color_keyboard import color_keyboard
from src.keyboards.price_keyboard import price_keyboard
from src.states.price import OrderStates

router = Router()

orders = connection["orders"]

def _oid(s: str) -> ObjectId:
    return ObjectId(str(s))


async def _get_item(order_id: str, item_index: int) -> dict | None:
    doc = await orders.find_one({"_id": _oid(order_id)}, projection={"items": 1})
    if not doc:
        return None
    items = doc.get("items", [])
    if 0 <= item_index < len(items):
        return items[item_index]
    return None


def _item_caption(item: dict) -> str:
    link = item.get("link") or "‚Äî"
    size = item.get("size") or "‚Äî"
    color = item.get("color") or "‚Äî"
    price = item.get("price_cny")
    price_str = f"{price} ¬•" if price is not None else "‚Äî"
    qty = item.get("qty")
    qty_str = str(qty) if qty is not None else "‚Äî"

    return (
        "üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üé® –¶–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {color}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_str}"
    )

@router.message(StateFilter(OrderStates.color), F.text)
async def handle_color(message: Message, state: FSMContext):
    color_text = message.text.strip()
    if not color_text or len(color_text) > 100:
        await message.answer(
            "‚ö† –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –ü—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π –∏ –±–µ–ª—ã–π, –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å",
            reply_markup=color_keyboard(back_cb="back_to_size"),
        )
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    item_index = int(data.get("item_index", 0))

    await orders.update_one(
        {"_id": _oid(order_id)},
        {"$set": {f"items.{item_index}.color": color_text}},
    )

    item = await _get_item(order_id, item_index)
    await state.set_state(OrderStates.price)
    await message.answer(
        f"{_item_caption(item)}\n\n"
        "üí∞ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö ¬•\n\n"
        "‚ùóÔ∏è–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –≤–∏–¥–∏—Ç–µ —Ç–∞–º.\n"
        "‚ö†Ô∏è –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–∞—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ >1 –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è!\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 399, 12, 599.20",
        reply_markup=price_keyboard(back_cb="back_to_color"),
        disable_web_page_preview=True,
    )


@router.message(StateFilter(OrderStates.color))
async def handle_color_invalid(message: Message):
    await message.answer(
        "‚ö† –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å —Ü–≤–µ—Ç–æ–º/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π. –ü—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π –∏ –±–µ–ª—ã–π",
        reply_markup=color_keyboard(back_cb="back_to_size"),
    )

@router.callback_query(F.data == "back_to_color")
async def back_to_color(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.color)
    await callback.message.edit_text(
        "üé® –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π –∏ –±–µ–ª—ã–π, –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å",
        reply_markup=color_keyboard(back_cb="back_to_size"),
    )
    await callback.answer()
