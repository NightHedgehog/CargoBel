from __future__ import annotations

import datetime as dt
from typing import Any, Dict

from bson import ObjectId
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from src.database.connection import connection
from src.keyboards.color_keyboard import color_keyboard
from src.keyboards.position_actions import position_actions
from src.keyboards.price_keyboard import price_keyboard
from src.keyboards.qty_keyboard import qty_keyboard
from src.keyboards.size_keyboard import size_keyboard
from src.states.price import OrderStates
from src.keyboards.photo_keyboard import photo_keyboard
from src.keyboards.link_keyboard import link_keyboard
from src.keyboards.edit_order import edit_order_kb
from src.keyboards.main_keyboard import main_menu
from src.utils.excel import build_order_xlsx
from config.settings import settings

router = Router()

orders = connection["orders"]
users = connection["users"]  # –µ—Å–ª–∏ –≤–µ–¥—ë—à—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# ----------------- utils -----------------

def _oid(s: str) -> ObjectId:
    return ObjectId(str(s))

def _item_caption(item: Dict[str, Any]) -> str:
    link = item.get("link") or "‚Äî"
    size = item.get("size") or "‚Äî"
    color = item.get("color") or "‚Äî"
    price = item.get("price_cny")
    price_str = f"{price} ¬•" if price is not None else "‚Äî"
    qty = item.get("qty")
    qty_str = str(qty) if qty is not None else "‚Äî"
    return (
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üé® –¶–≤–µ—Ç/—Ö–∞—Ä-–∫–∞: {color}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"üî¢ –ö–æ–ª-–≤–æ: {qty_str}"
    )

def _order_caption(order: Dict[str, Any]) -> str:
    lines = [f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{order.get('user_id')}"]
    for idx, it in enumerate(order.get("items", []), start=1):
        lines.append(f"\n–ü–æ–∑–∏—Ü–∏—è {idx}:\n{_item_caption(it)}")
    return "\n".join(lines)

def _missing_field(it: dict) -> str | None:
    if not it.get("link"): return "link"
    if not it.get("size"): return "size"
    if not it.get("color"): return "color"
    if it.get("price_cny") is None: return "price"
    if it.get("qty") is None: return "qty"
    return None


# ----------------- submit / add more -----------------

@router.callback_query(F.data == "submit_order")
async def submit_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id

    # 1) –ü–æ–ª—É—á–∞–µ–º draft
    draft = await orders.find_one({"user_id": user_id, "status": "draft"})
    if not draft or not draft.get("items"):
        await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä.", reply_markup=position_actions())
        await callback.answer()
        return

    # 2) –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —É–º–Ω–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–≥
    for i, it in enumerate(draft["items"]):
        miss = _missing_field(it)
        if miss:
            await state.update_data(order_id=str(draft["_id"]), item_index=i)
            if miss == "link":
                await state.set_state(OrderStates.link)
                await callback.message.edit_text(
                    f"–ü–æ–∑–∏—Ü–∏—è {i+1} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞.\n\n"
                    "üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.",
                    reply_markup=link_keyboard(back_cb="back_to_photo"),
                )
            elif miss == "size":
                await state.set_state(OrderStates.size)
                await callback.message.edit_text(
                    f"–ü–æ–∑–∏—Ü–∏—è {i+1}: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–º–µ—Ä/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞.\n\n"
                    "üìè –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 43, M, L, 42.5).",
                    reply_markup=size_keyboard(back_cb="back_to_link"),
                )
            elif miss == "color":
                await state.set_state(OrderStates.color)
                await callback.message.edit_text(
                    f"–ü–æ–∑–∏—Ü–∏—è {i+1}: –Ω–µ —É–∫–∞–∑–∞–Ω —Ü–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞.\n\n"
                    "üé® –ü—Ä–∏—à–ª–∏—Ç–µ —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π –∏ –±–µ–ª—ã–π, –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å).",
                    reply_markup=color_keyboard(back_cb="back_to_size"),
                )
            elif miss == "price":
                await state.set_state(OrderStates.price)
                await callback.message.edit_text(
                    f"–ü–æ–∑–∏—Ü–∏—è {i+1}: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞.\n\n"
                    "üí∞ –ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 399 –∏–ª–∏ 599.20).",
                    reply_markup=price_keyboard(back_cb="back_to_color"),
                )
            elif miss == "qty":
                await state.set_state(OrderStates.quantity)
                await callback.message.edit_text(
                    f"–ü–æ–∑–∏—Ü–∏—è {i+1}: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n\n"
                    "üî¢ –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 4, 5).",
                    reply_markup=qty_keyboard(back_cb="back_to_price"),
                )
            await callback.answer()
            return

    # 3) –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ–º Excel –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    user_doc = await users.find_one({"_id": user_id}) or {}
    xls_bytes = build_order_xlsx(draft, user_doc)
    caption = _order_caption(draft)

    msg = await bot.send_document(
        chat_id=settings.MANAGER_GROUP_ID,
        document=BufferedInputFile(xls_bytes, filename=f"order_{draft['_id']}.xlsx"),
        caption=caption
    )

    # 4) –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ submitted
    await orders.update_one(
        {"_id": draft["_id"]},
        {"$set": {
            "status": "submitted",
            "submitted_at": dt.datetime.utcnow(),
            "xlsx_file_id": msg.document.file_id if msg.document else None,
        }}
    )

    # 5) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=main_menu(),
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "add_more_item")
async def add_more_item(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ 'photo' –∏ –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ.
    –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ draft.items.
    """
    await state.set_state(OrderStates.photo)
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë —Ç–æ–≤–∞—Ä.\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.",
        reply_markup=photo_keyboard(back_cb="calc_back_to_intro"),
    )
    await callback.answer()


# ----------------- editing -----------------

@router.callback_query(F.data == "edit_order")
async def open_edit_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    draft = await orders.find_one({"user_id": user_id, "status": "draft"}, projection={"items": 1})
    if not draft or not draft.get("items"):
        await callback.message.edit_text("–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.")
        await callback.answer()
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=edit_order_kb(len(draft["items"]))
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_item:"))
async def edit_item(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.split(":", 1)[1])
    user_id = callback.from_user.id
    draft = await orders.find_one({"user_id": user_id, "status": "draft"})
    if not draft or idx >= len(draft.get("items", [])):
        await callback.message.edit_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    it = draft["items"][idx]
    # –∫–∞–∫–∞—è —á–∞—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not it.get("link"):
        need, new_state, kb = "link", OrderStates.link, link_keyboard(back_cb="back_to_photo")
        text = f"–ü–æ–∑–∏—Ü–∏—è {idx+1}: –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä."
    elif not it.get("size"):
        need, new_state, kb = "size", OrderStates.size, size_keyboard(back_cb="back_to_link")
        text = f"–ü–æ–∑–∏—Ü–∏—è {idx+1}: –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 43, M, L, 42.5)."
    elif not it.get("color"):
        need, new_state, kb = "color", OrderStates.color, color_keyboard(back_cb="back_to_size")
        text = f"–ü–æ–∑–∏—Ü–∏—è {idx+1}: –ø—Ä–∏—à–ª–∏—Ç–µ —Ü–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É."
    elif it.get("price_cny") is None:
        need, new_state, kb = "price", OrderStates.price, price_keyboard(back_cb="back_to_color")
        text = f"–ü–æ–∑–∏—Ü–∏—è {idx+1}: –ø—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 399 –∏–ª–∏ 599.20)."
    elif it.get("qty") is None:
        need, new_state, kb = "qty", OrderStates.quantity, qty_keyboard(back_cb="back_to_price")
        text = f"–ü–æ–∑–∏—Ü–∏—è {idx+1}: –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 4, 5)."
    else:
        # –µ—Å–ª–∏ –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await callback.message.edit_text(f"–ü–æ–∑–∏—Ü–∏—è {idx+1} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞:\n\n{_item_caption(it)}", reply_markup=position_actions())
        await callback.answer()
        return

    await state.update_data(order_id=str(draft["_id"]), item_index=idx)
    await state.set_state(new_state)
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()
