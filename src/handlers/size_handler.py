from bson import ObjectId

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from src.database.connection import connection
from src.keyboards.color_keyboard import color_keyboard
from src.keyboards.size_keyboard import size_keyboard
from src.states.price import OrderStates

router = Router()

orders = connection["orders"]

def _oid(s: str) -> ObjectId:
    return ObjectId(str(s))


async def _get_item(order_id: str, item_index: int) -> dict | None:
    doc = await orders.find_one({"_id": _oid(order_id)}, projection={"items": 1})
    if not doc:
        return None
    items = doc.get("items", [])
    if 0 <= item_index < len(items):
        return items[item_index]
    return None


def _item_caption(item: dict) -> str:
    link = item.get("link") or "‚Äî"
    size = item.get("size") or "‚Äî"
    color = item.get("color") or "‚Äî"
    price = item.get("price_cny")
    price_str = f"{price} ¬•" if price is not None else "‚Äî"
    qty = item.get("qty")
    qty_str = str(qty) if qty is not None else "‚Äî"

    return (
        "üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üé® –¶–≤–µ—Ç/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {color}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_str}"
    )


@router.message(StateFilter(OrderStates.size), F.text)
async def handle_size(message: Message, state: FSMContext):
    size_text = message.text.strip()
    if not size_text or len(size_text) > 50:
        await message.answer(
            "‚ö† –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 43, M, L, 42.5)",
            reply_markup=size_keyboard(back_cb="back_to_link"),
        )
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    item_index = int(data.get("item_index", 0))

    await orders.update_one(
        {"_id": _oid(order_id)},
        {"$set": {f"items.{item_index}.size": size_text}},
    )

    item = await _get_item(order_id, item_index)
    await state.set_state(OrderStates.color)
    await message.answer(
        f"{_item_caption(item)}\n\n"
        "üé® –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n"
        "‚ùóÔ∏è–¶–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n"
        "üìå –ü—Ä–∏–º–µ—Ä: –°–∏–Ω–∏–π –∏ –±–µ–ª—ã–π, –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å",
        reply_markup=color_keyboard(back_cb="back_to_size"),
        disable_web_page_preview=True,
    )


@router.message(StateFilter(OrderStates.size))
async def handle_size_invalid(message: Message):
    await message.answer(
        "‚ö† –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π. –ü—Ä–∏–º–µ—Ä: 43, M, L, 42.5",
        reply_markup=size_keyboard(back_cb="back_to_link"),
    )

@router.callback_query(F.data == "back_to_size")
async def back_to_size(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.size)
    await callback.message.edit_text(
        "üìè –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–æ–¥–µ–∂–¥—ã –∏–ª–∏ –æ–±—É–≤–∏) –∏–ª–∏ –¥—Ä—É–≥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (–¥–ª—è –∏–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 43, M, L, 42.5",
        reply_markup=size_keyboard(back_cb="back_to_link"),
    )
    await callback.answer()
